-----------------------------------------------------------------------------
| FLASK BASICS                                                              |
-----------------------------------------------------------------------------

(https://flask.palletsprojects.com/en/2.1.x/quickstart/)


- Flask Philosophy

    - Flask doesn't make any decisions for you, and doesn't include a database abstraction layer,
        form validation, or anything else.  Numerous extensions provide these things.



- Flask Installation

    - Automatically installed dependencies:

        - Werkzeug = implements WSGI, the standard Python interface between apps and servers
        - Jinja = template language that renders pages
        - MarkupSafe = comes with Jinja, escapes untrusted input to avoid injection attacks
        - ItsDangerous = securely signs data to ensure it's integrity
        - Click = framework for writing command-line applications, provides 'flask' command


    - These dependencies are optional.  They will not be installed automatically.  If you do install
        them, Flask will detect and use them.

        - Blinker = provides support for Signals (notifications to extensions)
        - python-dotenv = support for environment variables when running Flask commands
        - Watchdog = provides faster, more efficient reloader for development server



- Most Minimal Application

    - Here is our hello world app:

        # hello.py
        --------------------
        from flask import Flask

        app = Flask(__name__)

        @app.route('/')
        def hello_world():
            return "<p>Hello, World!</p>"


    - Now, we can run it:

        $ export FLASK_APP=hello
        $ flask run


    - As a shortcut, if the file is named 'app.py' or 'wsgi.py', you don't have to set the FLASK_APP
        environment variable.


    - Note that when we run our simple development server, it is only accessible from our own computer,
        since any user could run arbitrary code in development mode.

      If we have the debugger disabled or trust the users on our network, we can make the server
        publicly available:

        $ flask run --host=0.0.0.0


    - Never run the development server or the debugger in production!  It gives you a debugger in the
        page that can execute arbitrary code.  It's protected with a PIN, but still.



- HTML Escaping

    - When returning HTML (the default response type in Flask), any user-provided values rendered in
        the output must be escaped to protect from injection attacks.  Jinja will do this 
        automatically.

        from markupsafe import escape

        @app.route('/<name>')
        def hello(name):
            return f"Hello, {escape(name)}!"



- Routing

    - You can add variable sections to a URL.

        from markupsafe import escape

        @app.route('/user/<username>')
        def show_user_profile(username):
            # show the user profile for that user
            return f'User {escape(username)}'

        @app.route('/post/<int:post_id>')
        def show_post(post_id):
            # show the post with the given id, the id is an integer
            return f'Post {post_id}'


    - The converter types available are:

        string (default)
        int
        float
        path (string that accepts slashes)
        uuid (uuid string)


    - Routes with and without trailing slashes are treated as separate routes.



- URL Building

    - To build a URL for a specific function, use the 'url_for()' function.

        from flask import url_for

        @app.route('/')
        def index():
            return 'index'

        @app.route('/login')
        def login():
            return 'login'

        @app.route('/user/<username>')
        def profile(username):
            return f'{username}\'s profile'

        with app.test_request_context():
            print(url_for('index'))                           # /
            print(url_for('login'))                           # /login
            print(url_for('login', next='/'))                 # /login?next=/
            print(url_for('profile', username='John Doe'))    # /user/John%20Doe



- Handling HTTP Methods

    - You can use the 'methods' argument of the 'route()' decorator to support different HTTP
        methods.  By default, only GET is supported.

        from flask import request

        @app.route('/login', methods=['GET', 'POST'])
        def login():
            if request.method == 'POST':
                return do_the_login()
            else:
                return show_the_login_form()


    - If GET is present, Flask automatically adds support for the HEAD method also and handles HEAD
        requests according to the HTTP RFC.

      Likewise, OPTIONS is automatically implemented for you.



- Static Files

    - In production, you'll likely configure your web server to serve static files (ie JS and CSS).
        During development, Flask can just do that for you.

      All we need to do is create a folder called 'static' in your package or next to your module,
        and it will be available at '/static' on the application.


    - To generate URLs for static files, use the special 'static' endpoint name.

        url_for('static', filename='style.css')



- Rendering Templates

    - Generating HTML in Python is not fun, since you must do all the HTML escaping on your own to
        keep the application secure.  Because of that, Flask configures the Jinja2 template engine to
        do it for you.


    - To render a template, use the 'render_template' method.

        from flask import render_template

        @app.route('/hello/')
        @app.route('/hello/<name>')
        def hello(name=None):
            return render_template('hello.html', name=name)


    - Flask will look for templates in the 'templates' folder.  If your application is a module, this
        folder is next to the module:

        application.py
        /templates
          > hello.html

      If your application is a package, it's inside your package:

        /application
          > __init__.py
          /templates
            > hello.html


    - Here is the template itself:

        # hello.html
        -----------------------
        <!doctype html>
        <title>Hello from Flask</title>
        {% if name %}
          <h1>Hello {{ name }}!</h1>
        {% else %}
          <h1>Hello, World!</h1>
        {% endif %}


    - Inside templates, you have access to the 'config', 'request', 'session', and 'g' objects as well
        as the 'url_for()' and 'get_flashed_messages()' functions.

    - Template inheritance is used to reuse templates.  This is commonly used to reuse certain elements
        in every page.


    - Automatic escaping is enabled, so if 'name' contains HTML, it will be escaped automatically.
        If you know you can trust a variable, and it will be safe HTML, you can use the 'Markup'
        class to mark it safe or use the '|safe' in the template.

        >>> from markupsafe import Markup

        >>> Markup('<strong>Hello %s!</strong>') % '<blink>hacker</blink>'
        Markup('<strong>Hello &lt;blink&gt;hacker&lt;/blink&gt;!</strong>')

        >>> Markup.escape('<blink>hacker</blink>')
        Markup('&lt;blink&gt;hacker&lt;/blink&gt;')

        >>> Markup('<em>Marked up</em> &raquo; HTML').striptags()
        'Marked up Â» HTML'



- Accessing Request Data - Context Locals

    - Web applications need to react to the data a client sends to the server.  In Flask, this information
        is provided by the global 'request' object.  Flask uses context locals to make the object
        global.

    - Context objects in Flask are global objects, but not of the usual kind.  They are actually
        proxies to objects that are local to a specific context.


    - For instance, imagine the context being the handling thread.  A request comes in and the web 
        server decides to spawn a new thread.  When Flask starts it's internal request handling, it
        figures out that the current thread is the active context and binds the current application
        and the WSGI environments to that context (thread).

      It does this in an intelligent way, so that one application can invoke another application
        without breaking.


    - This turns out to be very important during unit testing.  Notice that code that depends on a
        request object will suddenly break because there is no request object.

      The solution is creating a request object yourself and binding it to the context.  The easiest
        solution for unit testing is to use the 'test_request_context()' context manager.

        from flask import request

        with app.test_request_context('/hello', method='POST'):
            # Now you can do something with the request
            assert request.path == '/hello'
            assert request.method == 'POST'


    - The other option is passing a whole WSGI environment into the 'request_context()' method.

        with app.request_context(environ):
            assert request.method == 'POST'



- Accessing Request Data - The Request Object

    - The request object is available in each route.

        from flask import request

        @app.route('/login', methods=['POST', 'GET'])
        def login():
            error = None
            if request.method == 'POST':
                if valid_login(request.form['username'],
                               request.form['password']):
                    return log_the_user_in(request.form['username'])
                else:
                    error = 'Invalid username/password'

            # Request method was GET or the credentials were invalid
            return render_template('login.html', error=error)



- Accessing Request Data - File Uploads

    - We can handle file uploads easily by setting the enctype="multipart/form-data" on your HTML
        form.


    - When you handle the request, the file is treated just like any other Python file handler.
        It also has a 'save()' method that allows you to store that file on the filesystem.

        from flask import request

        @app.route('/upload', methods=['GET', 'POST'])
        def upload_file():
            if request.method == 'POST':
                f = request.files['the_file']
                f.save('/var/www/uploads/uploaded_file.txt')



- Accessing Request Data - Cookies

    - To access cookies you can use the 'cookies' attribute.  To set cookies, you can use the
        'set_cookie()' method of response objects.


    - To read cookies:

        from flask import request

        @app.route('/')
        def index():
            username = request.cookies.get('username')
            # Use cookies.get(key) instead of cookies[key] to not get a
            # KeyError if the cookie is missing.


    - To store cookies:

        from flask import make_response

        @app.route('/')
        def index():
            resp = make_response(render_template(...))
            resp.set_cookie('username', 'the username')
            return resp

      Note that cookies are set on response objects.



- Redirects and Errors

    - To redirect a user to another endpoint, use the 'redirect()' function.  To abort a request early
        with an error code, use the 'abort()' function.

        from flask import abort, redirect, url_for

        @app.route('/')
        def index():
            return redirect(url_for('login'))

        @app.route('/login')
        def login():
            abort(401)
            this_is_never_executed()


    - By default, a black and white error code is shown for each error code.  If you want to 
        customize this, you can use the 'errorhandler' decorator.

        from flask import render_template

        @app.errorhandler(404)
        def page_not_found(error):
            return render_template('page_not_found.html'), 404



- Responses

    - The return value from a view function is automatically converted into a reponse object for you.
        
      If it's a string, it's converted into a response object with the string as the response body,
        a '200' status code, and 'text/html' mimetype.

      If the return value is a dict, 'jsonify()' is called to produce a response.


    - To send a HTML response:

        from flask import render_template

        @app.errorhandler(404)
        def not_found(error):
            return render_template('error.html'), 404


    - If we need to access the response object to change something else, we can use the 'make_response()'
        method.

        from flask import make_response

        @app.errorhandler(404)
        def not_found(error):
            resp = make_response(render_template('error.html'), 404)
            resp.headers['X-Something'] = 'A value'
            return resp


    - Flask converts return values of view methods into response objects using this logic:

        1. If response object is of the correct type, it's returned directly from the view.

        2. If it's a string, a response object is created with that data and the default
             parameters.

        3. If it's a dict, a response object is created using 'jsonify'.

        4. If a tuple is returned, it can be of the form:
             (response, status)
             (response, headers)  OR
             (response, status, headers)

        5. If none of that works, Flask will assume the return value is a valid WSGI application
             and convert that into a response object.



- APIs with JSON

    - If you return a dict from a view, it will be converted to a JSON response.

        @app.route("/me")
        def me_api():
            user = get_current_user()
            return {
                "username": user.username,
                "theme": user.theme,
                "image": url_for("user_image", filename=user.image),
            }


    - Depending on your API design, you may want to create JSON responses for types other than
        dict.  In this case, use the 'jsonify()' function, which will serialize any supported
        JSON data type.

        from flask import jsonify

        @app.route("/users")
        def users_api():
            users = get_all_users()
            return jsonify([user.to_json() for user in users])



- Sessions

    - In addition to the request object, there is also a second object called 'session' which allows
        you to store information specific to a user from one request to the next.

      This is implemented on top of cookies for you, and signs the cookies cryptographically, so the
        contents cannot be modified without the secret key.


    - To use sessions:

        from flask import session

        # Set the secret key to some random bytes. Keep this really secret!
        app.secret_key = b'_5#y2L"F4Q8z\n\xec]/'

        @app.route('/')
        def index():
            if 'username' in session:
                return f'Logged in as {session["username"]}'
            return 'You are not logged in'

        @app.route('/login', methods=['GET', 'POST'])
        def login():
            if request.method == 'POST':
                session['username'] = request.form['username']
                return redirect(url_for('index'))
            return '''
                <form method="post">
                    <p><input type=text name=username>
                    <p><input type=submit value=Login>
                </form>
            '''

        @app.route('/logout')
        def logout():
            # remove the username from the session if it's there
            session.pop('username', None)
            return redirect(url_for('index'))


    - One way to generate a good secret key:

        $ python -c 'import secrets; print(secrets.token_hex())'


    - With cookie-based sessions, Flask will take the values you put into the session object and
        serialize them into a cookie.

      Besides the default client-side based sessions, there are several extensions that support
        using different cache stores.



- Message Flashing

    - To use flash messages, the 'flash()' method is used.  To get ahold of the messages, the
        'get_flashed_messages()' method can be used.



- Logging

    - Flask includes a logger preconfigured for you to use.

        app.logger.debug('A value for debugging')
        app.logger.warning('A warning occurred (%d apples)', 42)
        app.logger.error('An error occurred')


    - The attached 'logger' is a standard logging 'Logger'.



- Hooking in WSGI Middleware

    - To add WSGI middleware, wrap the application's 'wsgi_app' attribute.  For example, to add
        Werkzeug's 'ProxyFix' middleware for running behind Nginx:

        from werkzeug.middleware.proxy_fix import ProxyFix
        app.wsgi_app = ProxyFix(app.wsgi_app)


    - Wrapping app.wsgi_app instead of app means that app still points at your Flask application, not 
        at the middleware, so you can continue to use and configure app directly.



- Using Flask Extensions

    - Extensions are packages that help you accomplish common tasks.  For example, Flask-SQLAlchemy
        provides SQLAlchemy support to make it easy to use with Flask.