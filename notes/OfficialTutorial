-----------------------------------------------------------------------------
| FLASK TUTORIAL                                                            |
-----------------------------------------------------------------------------

(https://flask.palletsprojects.com/en/2.1.x/tutorial/)


- Project root will contain:

    tutorial
      > flaskr
          > __init__.py
          > db.py
          > schema.sql
          > auth.py
          > blog.py
          > templates/
          > static/
      > tests
      > venv
      > setup.py and MANIFEST.in for telling Python how to install project



- Application Setup

    - A Flask application is an instance of the Flask class.  Everything about the application, such
        as configuration and URLs, is registered with this class.


    - We'll use 'flaskr/__init__.py' to contain our application factory, and it also tells Python that
        the 'flaskr' directory should be treated like a package.

        # flaskr/__init__.py
        ------------------------------------
        import os

        from flask import Flask


        def create_app(test_config=None):
            # Create and configure the app instance
            app = Flask(__name__, instance_relative_config=True)

            # Sets some default configuration that the app will use
            app.config.from_mapping(
                SECRET_KEY='dev',
                DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'),
            )

            # If 'test_config' is passed to teh factory, it will be used instead of instance config
            if test_config is None:
                # Load the instance config, if it exists, when not testing
                app.config.from_pyfile('config.py', silent=True)
            else:
                # Load the test config if passed in
                app.config.from_mapping(test_config)

            # Ensure the instance folder exists, because it's where the SQLite database files will go
            try:
                os.makedirs(app.instance_path)
            except OSError:
                pass

            # A simple page that says hello
            @app.route('/hello')
            def hello():
                return 'Hello, World!'

            return app


    - Now, we can run it:

        $ export FLASK_APP=flaskr
        $ export FLASK_ENV=development
        $ flask run

        # Visit in browser
        http://localhost:5000/hello



- Defining and Accessing the Database

    - We'll define and connect to our SQLite database:

        # flaskr/db.py
        -----------------------------
        import sqlite3

        import click
        from flask import current_app, g
        from flask.cli import with_appcontext


        def get_db():
            if 'db' not in g:
                g.db = sqlite3.connect(
                    current_app.config['DATABASE'],
                    detect_types=sqlite3.PARSE_DECLTYPES
                )
                g.db.row_factory = sqlite3.Row   # Return SQLite rows that behave like dicts

            return g.db


        def close_db(e=None):
            db = g.pop('db', None)

            if db is not None:
                db.close()


    - This connection we create is typically tied to a request in web applications.  We create the
        connection at some point when handling the request, and closed before the request is sent.


    - 'g' is a special object that is unique for each request.  It is used to store data that might
        be accessed by multiple functions during the request.

      The connection is stored and reused instead of creating a new connection if 'get_db' is
        called a second time during the same request.


    - 'current_app' is another special object that points to the Flask application handling the
        request.  Since we used an application factory, there is no application object when writing
        the rest of our code.

      'get_db' will be called when the application has been created and is handling a request, so
        'current_app' can be used.



- Creating the Tables

    - We'll add the SQL script to create our tables in 'flaskr/schema.sql'.


    - And, we'll add the Python functions that will run these SQL commands in the 'db.py' file.

        # flaskr/db.py
        -----------------------------
        def init_db():
            db = get_db()

            with current_app.open_resource('schema.sql') as f:
                db.executescript(f.read().decode('utf8'))


        @click.command('init-db')
        @with_appcontext
        def init_db_command():
            """Clear the existing data and create new tables."""
            init_db()
            click.echo('Initialized the database.')


    - The 'open_resource()' method opens a rile relative to the 'flaskr' package, which is useful
        so you don't have to know the absolute path.

    - 'click.command()' defines a command-line command called 'init-db' that calls the 'init_db'
        function and shows a success message to the user.



- Register with the Application

    - The 'close_db' and 'init_db_command' need to be registered with the application instance, so
        that they will be used by the application.

        flaskr/db.py
        ---------------------------
        def init_app(app):
            app.teardown_appcontext(close_db)
            app.cli.add_command(init_db_command)


    - The 'app.teardown_appcontext()' tells Flask to call that function when cleaning up after 
        returning the response.

      The 'app.cli.add_command()' adds a new command that can be called with the flask command.


    - And we need to call this initialization method in the application factory.

        # flaskr/__init__.py
        ---------------------------       
        def create_app():
            app = ...
            # existing code omitted

            from . import db
            db.init_app(app)

            return app



- Initialize the Database File

    - Now that we have registered the 'init-db' command with the app, it can be called using the
        'flask' command.

        # Still need this if it wasn't added before
        $ export FLASK_APP=flaskr
        $ export FLASK_ENV=development

        $ flask init-db



- Create a Blueprint

    - A 'Blueprint' is a way to organize a group of related views and other code.  Rather than 
        registering the views and other code directly, we just register the blueprint.


    - We'll have 2 blueprints, one for authentication functions and one for blog post functions.
        Here is the authentication one:

        # flaskr/auth.py
        ---------------------------       
        import functools

        from flask import (
            Blueprint, flash, g, redirect, render_template, request, session, url_for
        )

        from werkzeug.security import check_password_hash, generate_password_hash

        from flaskr.db import get_db

        bp = Blueprint('auth', __name__, url_prefix='/auth')


    - And, we'll import and register the blueprint in the application factory:

        # flaskr/__init__.py
        ---------------------------
        def create_app():
            app = ...
            # existing code omitted

            from . import auth
            app.register_blueprint(auth.bp)

            return app



- The First View - Register

    - Here's our first view:

        # flaskr/auth.py
        ---------------------------    
        @bp.route('/register', methods=('GET', 'POST'))
        def register():
            if request.method == 'POST':
                username = request.form['username']
                password = request.form['password']
                db = get_db()
                error = None

                if not username:
                    error = 'Username is required.'
                elif not password:
                    error = 'Password is required.'

                if error is None:
                    try:
                        db.execute(
                            "INSERT INTO user (username, password) VALUES (?, ?)",
                            (username, generate_password_hash(password)),
                        )
                        db.commit()
                    except db.IntegrityError:
                        error = f"User {username} is already registered."
                    else:
                        return redirect(url_for("auth.login"))

                flash(error)

            return render_template('auth/register.html')


    - Note we have escaped our parameters in the db query to protect against sql injection attacks.



- The Login View

    - Here's the login view:

        # flaskr/auth.py
        --------------------------- 
        @bp.route('/login', methods=('GET', 'POST'))
        def login():
            if request.method == 'POST':
                username = request.form['username']
                password = request.form['password']
                db = get_db()
                error = None
                user = db.execute(
                    'SELECT * FROM user WHERE username = ?', (username,)
                ).fetchone()

                if user is None:
                    error = 'Incorrect username.'
                elif not check_password_hash(user['password'], password):
                    error = 'Incorrect password.'

                if error is None:
                    session.clear()
                    session['user_id'] = user['id']
                    return redirect(url_for('index'))

                flash(error)

            return render_template('auth/login.html')



- Loading the Logged In User

    - At the beginning of each request, the user's information should be loaded and made available to
        other views.

        # flaskr/auth.py
        ---------------------------
        @bp.before_app_request
        def load_logged_in_user():
            user_id = session.get('user_id')

            if user_id is None:
                g.user = None
            else:
                g.user = get_db().execute(
                    'SELECT * FROM user WHERE id = ?', (user_id,)
                ).fetchone()


    - The 'bp.before_app_request()' registers a function that runs before the view function, no 
        matter what URL is requested.



- Logout

    - To log out, we remove the user id from the session.

        # flaskr/auth.py
        ---------------------------
        @bp.route('/logout')
        def logout():
            session.clear()
            return redirect(url_for('index'))



- Require Authentication in Other Views

    - Finally, 