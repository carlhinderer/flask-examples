-----------------------------------------------------------------------------
| FLASK TUTORIAL                                                            |
-----------------------------------------------------------------------------

(https://flask.palletsprojects.com/en/2.1.x/tutorial/)


- Project root will contain:

    tutorial
      > flaskr
          > __init__.py
          > db.py
          > schema.sql
          > auth.py
          > blog.py
          > templates/
          > static/
      > tests
      > venv
      > setup.py and MANIFEST.in for telling Python how to install project



- Application Setup

    - A Flask application is an instance of the Flask class.  Everything about the application, such
        as configuration and URLs, is registered with this class.


    - We'll use 'flaskr/__init__.py' to contain our application factory, and it also tells Python that
        the 'flaskr' directory should be treated like a package.

        # flaskr/__init__.py
        ------------------------------------
        import os

        from flask import Flask


        def create_app(test_config=None):
            # Create and configure the app instance
            app = Flask(__name__, instance_relative_config=True)

            # Sets some default configuration that the app will use
            app.config.from_mapping(
                SECRET_KEY='dev',
                DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'),
            )

            # If 'test_config' is passed to the factory, it will be used instead of instance config
            if test_config is None:
                # Load the instance config, if it exists, when not testing
                app.config.from_pyfile('config.py', silent=True)
            else:
                # Load the test config if passed in
                app.config.from_mapping(test_config)

            # Ensure the instance folder exists, because it's where the SQLite database files will go
            try:
                os.makedirs(app.instance_path)
            except OSError:
                pass

            # A simple page that says hello
            @app.route('/hello')
            def hello():
                return 'Hello, World!'

            return app


    - Now, we can run it:

        $ export FLASK_APP=flaskr
        $ export FLASK_ENV=development
        $ flask run

        # Visit in browser
        http://localhost:5000/hello



- Defining and Accessing the Database

    - We'll define and connect to our SQLite database:

        # flaskr/db.py
        -----------------------------
        import sqlite3

        import click
        from flask import current_app, g
        from flask.cli import with_appcontext


        def get_db():
            if 'db' not in g:
                g.db = sqlite3.connect(
                    current_app.config['DATABASE'],
                    detect_types=sqlite3.PARSE_DECLTYPES
                )
                g.db.row_factory = sqlite3.Row   # Return SQLite rows that behave like dicts

            return g.db


        def close_db(e=None):
            db = g.pop('db', None)

            if db is not None:
                db.close()


    - This connection we create is typically tied to a request in web applications.  We create the
        connection at some point when handling the request, and closed before the request is sent.


    - 'g' is a special object that is unique for each request.  It is used to store data that might
        be accessed by multiple functions during the request.

      The connection is stored and reused instead of creating a new connection if 'get_db' is
        called a second time during the same request.


    - 'current_app' is another special object that points to the Flask application handling the
        request.  Since we used an application factory, there is no application object when writing
        the rest of our code.

      'get_db' will be called when the application has been created and is handling a request, so
        'current_app' can be used.



- Creating the Tables

    - We'll add the SQL script to create our tables in 'flaskr/schema.sql'.


    - And, we'll add the Python functions that will run these SQL commands in the 'db.py' file.

        # flaskr/db.py
        -----------------------------
        def init_db():
            db = get_db()

            with current_app.open_resource('schema.sql') as f:
                db.executescript(f.read().decode('utf8'))


        @click.command('init-db')
        @with_appcontext
        def init_db_command():
            """Clear the existing data and create new tables."""
            init_db()
            click.echo('Initialized the database.')


    - The 'open_resource()' method opens a rile relative to the 'flaskr' package, which is useful
        so you don't have to know the absolute path.

    - 'click.command()' defines a command-line command called 'init-db' that calls the 'init_db'
        function and shows a success message to the user.



- Register with the Application

    - The 'close_db' and 'init_db_command' need to be registered with the application instance, so
        that they will be used by the application.

        flaskr/db.py
        ---------------------------
        def init_app(app):
            app.teardown_appcontext(close_db)
            app.cli.add_command(init_db_command)


    - The 'app.teardown_appcontext()' tells Flask to call that function when cleaning up after 
        returning the response.

      The 'app.cli.add_command()' adds a new command that can be called with the flask command.


    - And we need to call this initialization method in the application factory.

        # flaskr/__init__.py
        ---------------------------       
        def create_app():
            app = ...
            # existing code omitted

            from . import db
            db.init_app(app)

            return app



- Initialize the Database File

    - Now that we have registered the 'init-db' command with the app, it can be called using the
        'flask' command.

        # Still need this if it wasn't added before
        $ export FLASK_APP=flaskr
        $ export FLASK_ENV=development

        $ flask init-db



- Create a Blueprint

    - A 'Blueprint' is a way to organize a group of related views and other code.  Rather than 
        registering the views and other code directly, we just register the blueprint.


    - We'll have 2 blueprints, one for authentication functions and one for blog post functions.
        Here is the authentication one:

        # flaskr/auth.py
        ---------------------------       
        import functools

        from flask import (
            Blueprint, flash, g, redirect, render_template, request, session, url_for
        )

        from werkzeug.security import check_password_hash, generate_password_hash

        from flaskr.db import get_db

        bp = Blueprint('auth', __name__, url_prefix='/auth')


    - And, we'll import and register the blueprint in the application factory:

        # flaskr/__init__.py
        ---------------------------
        def create_app():
            app = ...
            # existing code omitted

            from . import auth
            app.register_blueprint(auth.bp)

            return app



- The First View - Register

    - Here's our first view:

        # flaskr/auth.py
        ---------------------------    
        @bp.route('/register', methods=('GET', 'POST'))
        def register():
            if request.method == 'POST':
                username = request.form['username']
                password = request.form['password']
                db = get_db()
                error = None

                if not username:
                    error = 'Username is required.'
                elif not password:
                    error = 'Password is required.'

                if error is None:
                    try:
                        db.execute(
                            "INSERT INTO user (username, password) VALUES (?, ?)",
                            (username, generate_password_hash(password)),
                        )
                        db.commit()
                    except db.IntegrityError:
                        error = f"User {username} is already registered."
                    else:
                        return redirect(url_for("auth.login"))

                flash(error)

            return render_template('auth/register.html')


    - Note we have escaped our parameters in the db query to protect against sql injection attacks.



- The Login View

    - Here's the login view:

        # flaskr/auth.py
        --------------------------- 
        @bp.route('/login', methods=('GET', 'POST'))
        def login():
            if request.method == 'POST':
                username = request.form['username']
                password = request.form['password']
                db = get_db()
                error = None
                user = db.execute(
                    'SELECT * FROM user WHERE username = ?', (username,)
                ).fetchone()

                if user is None:
                    error = 'Incorrect username.'
                elif not check_password_hash(user['password'], password):
                    error = 'Incorrect password.'

                if error is None:
                    session.clear()
                    session['user_id'] = user['id']
                    return redirect(url_for('index'))

                flash(error)

            return render_template('auth/login.html')



- Loading the Logged In User

    - At the beginning of each request, the user's information should be loaded and made available to
        other views.

        # flaskr/auth.py
        ---------------------------
        @bp.before_app_request
        def load_logged_in_user():
            user_id = session.get('user_id')

            if user_id is None:
                g.user = None
            else:
                g.user = get_db().execute(
                    'SELECT * FROM user WHERE id = ?', (user_id,)
                ).fetchone()


    - The 'bp.before_app_request()' registers a function that runs before the view function, no 
        matter what URL is requested.



- Logout

    - To log out, we remove the user id from the session.

        # flaskr/auth.py
        ---------------------------
        @bp.route('/logout')
        def logout():
            session.clear()
            return redirect(url_for('index'))



- Require Authentication in Other Views

    - Finally, we'll have some views that require a user to be logged in, so we'll add a decorator
        that can be used to check this for each view it's applied to.

        # flaskr/auth.py
        ---------------------------
        def login_required(view):
            @functools.wraps(view)
            def wrapped_view(**kwargs):
                if g.user is None:
                    return redirect(url_for('auth.login'))

                return view(**kwargs)

            return wrapped_view



- Templates

    - We'll add the base layout in 'flaskr/templates/base.html'.

    - We'll add the form for registering new users in 'flaskr/templates/auth/register.html'.

    - We'll add the form for logging in in 'flaskr/templates/auth/login.html'.

    - To test this, we'll navigate to 'http://127.0.0.1:5000/auth/register' to test registering
        a new user.



- Static Files

    - We'll include our styles in a static css file 'flaskr/static/style.css' file.  We already
        have a link to it in our 'base.html' template.

    - Now, we can see the styles at 'http://127.0.0.1:5000/auth/login'.



- Blog Blueprint

    - Now, we'll add a Blog blueprint, which will list all posts, and will allow all logged in users 
        to create posts, and will allow a post author to edit or delete it.


    - First, we'll define the blueprint:

        # flaskr/blog.py
        ---------------------------
        from flask import (
            Blueprint, flash, g, redirect, render_template, request, url_for
        )
        from werkzeug.exceptions import abort

        from flaskr.auth import login_required
        from flaskr.db import get_db

        bp = Blueprint('blog', __name__)


    - Next, we'll register the blueprint and add the default route in the 

        # flaskr/__init__.py
        ---------------------------
        def create_app():
            app = ...
            # existing code omitted

            from . import blog
            app.register_blueprint(blog.bp)
            app.add_url_rule('/', endpoint='index')

            return app


    - Now, we'll add the routes:
        index
        create
        update
        delete

      And we'll add the templates:
        index.html
        create.html
        update.html
        delete.html


    - Note that both the 'update' and 'delete' views will need to check if the logged in user is the
        author of the post.  We can write a function that both views will call.

        def get_post(id, check_author=True):
            post = get_db().execute(
                'SELECT p.id, title, body, created, author_id, username'
                ' FROM post p JOIN user u ON p.author_id = u.id'
                ' WHERE p.id = ?',
                (id,)
            ).fetchone()

            if post is None:
                abort(404, f"Post id {id} doesn't exist.")

            if check_author and post['author_id'] != g.user['id']:
                abort(403)

            return post



- Make the Project Installable

    - Making a project installable means that you can build a 'distribution' file and install that
        in another environment.  This makes deploying the project the same as any other library, and
        you can use all the standard Python tools to manage everything.

    - We can manage our dependencies like other packages do, so 'pip install yourproject.whl' installs
        them.

    - Test tools can isolate your test environment from your development environment.



- Describe the Project

    - The 'setup.py' file describes your project and the files that belong to it.

        # setup.py
        ---------------------------
        from setuptools import find_packages, setup

        setup(
            name='flaskr',
            version='1.0.0',
            packages=find_packages(),      # Automatically find the directories to include
            include_package_data=True,     # Include folders specified in MANIFEST.in
            zip_safe=False,
            install_requires=[
                'flask',
            ],
        )


    - The 'MANIFEST.in' file specifies what files and folders should be included in the package.

        # MANIFEST.in
        ---------------------------
        include flaskr/schema.sql
        graft flaskr/static
        graft flaskr/templates
        global-exclude *.pyc



- Install the Project

    - Now, we can use pip to install our project in the virtual environment.

        $ pip install -e .

      This tells pip to find 'setup.py' in the current directory, and install it in 'editable'
        ('development') mode.  This way, we can make changes to our local code, and they will
        be reflected.  We only need to change them if we change metadata about the project.



- Test Coverage

    - We'll use pytest and coverage to create our tests.

        $ pip install pytest coverage


    - We'll define our fixtures in the 'tests/conftest.py' file.  First, we'll add a sql script to
        create our test data.

        # tests/data.sql
        ---------------------------
        INSERT INTO user (username, password)
        VALUES
          ('test',
          'pbkdf2:sha256:50000$TCI4GzcX$0de171a4f4dac32e3364c7ddc7c14f3e2fa61f2d17574483f7ffbb431b4acb2f'),
          ('other',
           'pbkdf2:sha256:50000$kJPKsz6N$d2d4784f1b030a9761f5ccaeeaca413f27f2ecb76d6168407af962ddce849f79');

        INSERT INTO post (title, body, author_id, created)
        VALUES
          ('test title', 'test' || x'0a' || 'body', 1, '2018-01-01 00:00:00');


    - The 'app' fixture will call the factory, and pass 'test_config' to configure the application and
        database for testing instead of using your local development configuration.

        # tests/conftest.py
        ---------------------------
        import os
        import tempfile

        import pytest
        from flaskr import create_app
        from flaskr.db import get_db, init_db

        with open(os.path.join(os.path.dirname(__file__), 'data.sql'), 'rb') as f:
            _data_sql = f.read().decode('utf8')


        @pytest.fixture
        def app():
            db_fd, db_path = tempfile.mkstemp()

            app = create_app({
                'TESTING': True,
                'DATABASE': db_path,
            })

            with app.app_context():
                init_db()
                get_db().executescript(_data_sql)

            yield app

            os.close(db_fd)
            os.unlink(db_path)


        @pytest.fixture
        def client(app):
            return app.test_client()


        @pytest.fixture
        def runner(app):
            return app.test_cli_runner()


    - Tests will use the 'client' fixture to make requests to the application.

      The 'runner' fixture creates a runner that can call the 'click' commands registered with the
        application.



- Testing the Factory

    - There isn't much to test about the application factory itself.  If there is a problem in the 
        application factory, other tests will blow up anyways.

      The only behavior that can change is passing test config.  If config is not passed, there should
        be some default configuration, and if it is, it should be overridden.


    - Also, we'll test the simple '/hello' route we started with.

        # tests/test_factory.py
        ---------------------------
        from flaskr import create_app

        def test_config():
            assert not create_app().testing
            assert create_app({'TESTING': True}).testing

        def test_hello(client):
            response = client.get('/hello')
            assert response.data == b'Hello, World!'



- Testing the Database

    - Within an application context, 'get_db' should return the same connection each time it is
        called.  After the context, the connection should be closed.

      The 'init-db' command should call the 'init_db' function and output a message.


        # tests/test_factory.py
        ---------------------------
        import sqlite3

        import pytest
        from flaskr.db import get_db


        def test_get_close_db(app):
            with app.app_context():
                db = get_db()
                assert db is get_db()

            with pytest.raises(sqlite3.ProgrammingError) as e:
                db.execute('SELECT 1')

            assert 'closed' in str(e.value)

        def test_init_db_command(runner, monkeypatch):
            class Recorder(object):
                called = False

            def fake_init_db():
                Recorder.called = True

            monkeypatch.setattr('flaskr.db.init_db', fake_init_db)
            result = runner.invoke(args=['init-db'])
            assert 'Initialized' in result.output
            assert Recorder.called


    - The 'init-db' test uses Pytest's 'monkeypatch' fixture to replace the 'init_db' function with
        one that records its been called.



- Authentication

    - For most of the tests, a user needs to be logged in.  The easiest way to do this is to make a
        POST request to the 'login' view with the client.  We can write a fixture for that and pass
        it into each test that needs it.

        # tests/conftest.py
        ---------------------------
        class AuthActions(object):
            def __init__(self, client):
                self._client = client

            def login(self, username='test', password='test'):
                return self._client.post(
                    '/auth/login',
                    data={'username': username, 'password': password}
                )

            def logout(self):
                return self._client.get('/auth/logout')


        @pytest.fixture
        def auth(client):
            return AuthActions(client)


    - Now, we can call 'auth.login()' in a test to log in as the 'test' user, which was inserted as part
        of the test data in the 'app' fixture.


    - Finally, we'll add the following tests to 'test_auth.py':

        test_register
        test_register_validate_input
        test_login
        test_login_validate_input
        test_logout



- Blog

    - Now, we'll add tests for the blog posts:

        test_index
        test_login_required
        test_author_required
        test_exists_required
        test_create
        test_update
        test_create_update_validate
        test_delete
